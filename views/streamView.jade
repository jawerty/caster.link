html
	head
		title Caster
		script(src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js")
		script(src="../javascripts/RTCMultiConnection-v1.9.js")
		script(src="../javascripts/socket.io-1.0.6.js")
		link(href="../stylesheets/ionic.css", rel="stylesheet")
		link(href="../stylesheets/style.css", rel="stylesheet")
		link(href="../stylesheets/ionicons.css", rel="stylesheet")
		script.
			localStorage.homeLink = "../templates/home.html"
		script(src="../javascripts/ionic.bundle.js")
		script(src="../javascripts/app.js")
		script(src="../javascripts/controllers.js")
		script(src="../javascripts/services.js")

		style.
			body {
				background-color: #000;
			}
			@media screen and (max-width: 480px) {
				#video-channel {
					width: 100%;
					text-align: center;
				}
				video {
					width: 100%;
					min-height: 50%;
					max-height: 100%;
					margin: 0 auto;
				}
			}
			
			@media screen and (min-width: 480px) {
				#video-channel {
					width: 100%;
					text-align: center;
				}
				video {
					width: 80%;
					max-height: 100%;
					margin: 0 auto;
				}
			}
			h1 {
				color: #777;
				font-family: "Helvetica Neue", helvetica, sans-serif;
				font-size: 3vw;
			}

	body(ng-app="starter", ontouchstart="")

		ion-header-bar.bar-calm.nav-title-slide-ios7(align-title='center')
			h1.title Caster

		ion-content
		div(id="video-channel")
		script.
			var sessionID = "#{sessionID}";
			var userID = "#{userID}";

			console.log("Begin RTC Connection")
			console.log(sessionID + " " + userID)
			var connection = new RTCMultiConnection(sessionID);
			connection.bandwidth = {};
			connection.openSignalingChannel = openSignalingChannel;
			var videoStream = document.getElementById('video-channel');

			connection.onstream = function (e) {
				console.log("onstream"+videoStream);
				e.mediaElement.id = "video-channnel";

				document.getElementById("video-channel").appendChild(e.mediaElement);
			};

			var seshInfo = {
				userid: userID,
				sessionid: sessionID,
				session: {
					video: true,
					oneway: true
				}
			};

			if (userID && sessionID) {
				connection.join(seshInfo);
			}

			function openSignalingChannel(config) {

				config.channel = config.channel || this.channel;
				console.log("config: "+JSON.stringify(config))
				var websocket = new WebSocket('ws://brocast-signalingserver.herokuapp.com');
				websocket.onopen = function () {
				
					
					websocket.push(JSON.stringify({
						open: true,
						channel: config.channel
					}));
					if (config.callback) config.callback(websocket);
				};

				websocket.onerror = function(err) {
					alert(JSON.stringify(err));

					alert('Unable to connect to ws://brocast-signalingserver.herokuapp.com');
				};

				websocket.onmessage = function (event) {
					if (JSON.parse(event.data).streamName) {
						console.log("Title: "+JSON.parse(event.data).streamName)
						$(".title")[0].innerText += "â€” " + JSON.parse(event.data).streamName;
					}
					config.onmessage(JSON.parse(event.data));
				};

				websocket.push = websocket.send;
				websocket.send = function (data) {
					console.log(JSON.stringify(data))
					websocket.push(JSON.stringify({
						data: data,
						channel: config.channel
					}));
				};
			}
